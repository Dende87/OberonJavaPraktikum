1 Mini-Programmierwelt / Das Java-Oberon-Modell:

Das Oberon-Modell ist ein spezielles didatktisches Modell zum Erlernen der Programmierung.
Im Modell nimmt Oberon(ein Hund) die Rolle des Computers ein. Oberon kann befehle entgegen nehmen ähnlich wie ein Computer.
Als Programmierer werden Ihnen bestimmte Aufgaben gestellt, die durch die Steuerung des Hundes zu lösen sind. Sogenannte
Oberon-Aufgaben. Zu diesen Aufgaben müssen Sie in der Oberon-Sprache, die fast vollständig Java entspricht, Oberon-Programme entwickeln,
die die Aufgaben korrekt und vollständig lösen. Diese Aufgaben werden nach und nach komplexer. Zum Lösen der Aufgaben
müssen bestimmte Programmierkonzepte eingestezt werden, die im Oberon-Modell inkrementell eingeführt werden.

Die Grundidee des Oberon-Modells ist einfach: Sie als Programmierer müssen einen(virtuellen) Hund
durch eine (virtuelle) Landschaft steuern und ihn gegebene Aufgaben lösen lassen.

1.1 Landschaft

Die Landschaft(Wiese) wird durch Kacheln repräsentiert, die Anzahl der Kacheln ist variabel aber nie unendlich groß.
Hund Oberon sucht auf einer schönen Wiese Knochen zum Ausgraben, diese Knochen sind durch Knochensymbole auf der Landschaft markiert. Es können
mehrere Knochen auf einer Kachel liegen, die der Hund aufsammeln kann.
Zusätzlich können auf der Wiese Bäume stehen, wodurch die Kachel auf dem sie stehen blockiert sind, es können keine Knochen dort gefunden werden,
da der Hund diese Kacheln nicht betreten kann.
Die Wiese kann nicht verlassen, da diese vollständig mit Bäumen umgeben ist(nicht sichtbar für den Benutzer).

1.2 Oberon (Hund)

Im Oberon-Modell existiert immer genau ein Oberon. Oberon steht dabei auf einer Kachel der Landschaft. Diese darf nicht durch einen Baum
blockiert sein, sie kann jedoch Knochen enthalten. Oberon kann in vier unterschiedlichen Blickrichtungen(Nord, Süd, West, Ost) auf den
Kacheln stehen. Je nach Blickrichtung wird Oberon durch unterschiedliche Symbole repräsentiert.


1.3 Attikus (Besitzer)

Auf der Landschaft befindet sich der Besitzer (Attikus) von Oberon zu dem er seine gefundenen Knochen bringen kann. Dieser wird durch ein vorgegebenes Programm
oder vom Programmierer selbst platziert. Attikus selbst bleibt fest auf einer Kachel und ist nicht zu steuern, Oberon kann aber auf der selben Kachel wie Attikus stehen.

1.4 Befehle

Oberon kennt 4 Befehle und 3 Testbefehle, durch deren Aufruf ein Programmierer Oberon durch ein gegebenes Oberon-Terretorium steuern kann.
Oberon ist in der lage mit einfachen Befehlen die Wiese zu erkunden. Diese Befehlen werden im Folgenden aufgelistet:

    * void moveAhead(): Oberon geht eine Kachel in seiner aktuellen Blickrichtung nach vorne.
    * void turnLeft(): Oberon dreht sich auf der Kachel, auf der er gerade steht, um 90 Grad entgegen dem Uhrzeigersinn.
    * void take(): Oberon nimmt von der Kachel, auf der er sich gerade befindet, genau einen Knochen, d.h. anschließend hat Oberon einen Knochen mehr im Maul und
                   auf der Kachel liegt ein Knochen weniger als vorher.
    * void give(): Oberon legt auf der Kachel, auf der er sich gerade befindet, genau ein Knochen aus seinem Maul ab, d.h. er hat anschließend ein Knochen weniger im Maul,
                  und auf der Kachel liegt ein Knochen mehr als vorher oder Attikus hat einen Knochen mehr.
    * boolean clearAhead(): Liefert den Wert true, falls sich auf der Kachel in Blickrichtung vor dem Hamster kein Baum beﬁndet. Ist die Kachel durch einen Baum blockiert,
                          dann wird der Wert false geliefert.
    * boolean mawEmpty(): Liefert den Wert false, falls Oberon einen oder mehrere Knochen im Maul hat. Beﬁnden sich kein Knochen im Maul von Oberon, dann wird der Wert true geliefert.
    * boolean boneAvailable(): Liefert den Wert true, falls auf der Kachel, auf der Oberon gerade steht, ein oder mehrere Knochen liegen.
                               Beﬁndet sich kein Knochen auf der Kachel, dann wird der Wert false geliefert.
